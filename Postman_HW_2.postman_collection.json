{
	"info": {
		"_postman_id": "64e1e279-e131-468a-84af-c0bf8477c77e",
		"name": "Group 31 ДЗ-2",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "19371975"
	},
	"item": [
		{
			"name": "First",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Проверить, что в body приходит правильный string\r",
							"pm.test(\"Body matches string\", function () {\r",
							"    pm.expect(pm.response.text()).to.eql(\"This is the first responce from server!ss\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5005/first",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"first"
					]
				}
			},
			"response": []
		},
		{
			"name": "user_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//Спарсить response body в json\r",
							"var responseJson = pm.response.json();\r",
							"\r",
							"//Проверить, что name в ответе равно name s request (name вбить руками)\r",
							"pm.test(\"Test name\", function () {\r",
							"    pm.expect(responseJson.name).to.eql(\"Max\");\r",
							"});\r",
							"\r",
							"//Проверить, что age в ответе равно age s request (age вбить руками)\r",
							"pm.test('Test age', function () {\r",
							"    pm.expect(responseJson.age).to.eql('21');\r",
							"});\r",
							"\r",
							"//Проверить, что salary в ответе равно salary s request (salary вбить руками)\r",
							"pm.test ('Test salary', function () {\r",
							"    pm.expect(responseJson.salary).to.eql(1245);\r",
							"});\r",
							"\r",
							"//Спарсить request\r",
							"let req = request.data;\r",
							"\r",
							"//Проверить, что name в ответе равно name s request (name забрать из request)\r",
							"pm.test(\"Test name auto\", function () {\r",
							"    pm.expect(responseJson.name).to.eql(req.name)\r",
							"});\r",
							"\r",
							"//Проверить, что age в ответе равно age s request (age забрать из request)\r",
							"pm.test(\"Test age auto\", function () {\r",
							"    pm.expect(responseJson.age).to.eql(req.age)\r",
							"});\r",
							"\r",
							"//Проверить, что salary в ответе равно salary s request (salary забрать из request)\r",
							"pm.test(\"Test salary auto\", function () {\r",
							"    pm.expect(responseJson.salary).to.eql(+req.salary)\r",
							"});\r",
							"\r",
							"//Вывести в консоль параметр family из response\r",
							"console.log(responseJson.family);\r",
							"\r",
							"//Проверить что u_salary_1_5_year в ответе равно salary*4 (salary забрать из request)\r",
							"pm.test(\"u_salary_1_5_year\", function() {\r",
							"    pm.expect(responseJson.family.u_salary_1_5_year).to.eql(+req.salary*4)\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "Max",
							"type": "text"
						},
						{
							"key": "age",
							"value": "21",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "1245",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/user_info_3",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"user_info_3"
					]
				}
			},
			"response": []
		},
		{
			"name": "object_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//Спарсить response body в json\r",
							"let res_body = pm.response.json();\r",
							"\r",
							"//Спарсить request\r",
							"const requestData = pm.request.url.query.toObject();\r",
							"\r",
							"//Параметр Dog\r",
							"let dog = res_body.family.pets.dog;\r",
							"\r",
							"//Проверить, что name в ответе равно name s request (name забрать из request)\r",
							"pm.test(\"Test name auto\", function () {\r",
							"    pm.expect(res_body.name).to.eql(requestData.name)\r",
							"});\r",
							"\r",
							"//Проверить, что age в ответе равно age s request (age забрать из request)\r",
							"pm.test(\"Test age auto\", function () {\r",
							"    pm.expect(res_body.age).to.eql(requestData.age)\r",
							"});\r",
							"\r",
							"//Проверить, что salary в ответе равно salary s request (salary забрать из request)\r",
							"pm.test(\"Test salary auto\", function() {\r",
							"    pm.expect(res_body.salary).to.eql(+requestData.salary)\r",
							"});\r",
							"\r",
							"//Вывести в консоль параметр family из response\r",
							"console.log(res_body.family);\r",
							"\r",
							"//Проверить, что у параметра dog есть параметры name\r",
							"pm.test(\"Dog name\", function() {\r",
							"    pm.expect(dog).to.have.property(\"name\")\r",
							"});\r",
							"\r",
							"//Проверить, что у параметра dog есть параметры age\r",
							"pm.test(\"Dog age\", function() {\r",
							"    pm.expect(dog).to.have.property(\"age\")\r",
							"});\r",
							"\r",
							"//Проверить, что параметр name имеет значение Luky\r",
							"pm.test(\"Dog name is Luky\", function() {\r",
							"    pm.expect(dog.name).to.eql(\"Luky\")\r",
							"});\r",
							"\r",
							"//Проверить, что параметр age имеет значение 4\r",
							"pm.test(\"Dog age is 4\", function() {\r",
							"    pm.expect(dog.age).to.eql(4)\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5005/object_info_3?name=Sveta&age=28&salary=2643",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"object_info_3"
					],
					"query": [
						{
							"key": "name",
							"value": "Sveta"
						},
						{
							"key": "age",
							"value": "28"
						},
						{
							"key": "salary",
							"value": "2643"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "object_info_4",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Статаус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//Спарсить response body в json\r",
							"let res_body = pm.response.json();\r",
							"\r",
							"//Спарсить request\r",
							"let req_data = pm.request.url.query.toObject();\r",
							"//let req_age = +req_data.age;\r",
							"//let salary = +req_data.salary\r",
							"\r",
							"//Проверить, что name в ответе равно name s request (name забрать из request)\r",
							"pm.test(\"Test name auto\", function() {\r",
							"    pm.expect(res_body.name).to.eql(req_data.name)\r",
							"});\r",
							"\r",
							"//Проверить, что age в ответе равно age из request (age забрать из request)\r",
							"pm.test(\"Test age auto\", function() {\r",
							"    pm.expect(res_body.age).to.eql(+req_data.age)\r",
							"});\r",
							"\r",
							"//Вывести в консоль параметр salary из request\r",
							"console.log(+req_data.salary);\r",
							"\r",
							"//Вывести в консоль параметр salary из response\r",
							"console.log(res_body.salary);\r",
							"\r",
							"//Вывести в консоль 0-й элемент параметра salary из response\r",
							"console.log(res_body.salary[0]);\r",
							"\r",
							"//Вывести в консоль 1-й элемент параметра salary параметр salary из response\r",
							"console.log(res_body.salary[1]);\r",
							"\r",
							"//Вывести в консоль 2-й элемент параметра salary параметр salary из response\r",
							"console.log(res_body.salary[2]);\r",
							"\r",
							"//Проверить, что 0-й элемент параметра salary равен salary из request (salary забрать из request)\r",
							"pm.test(\"Test salary 0 auto\", function() {\r",
							"    pm.expect(res_body.salary[0]).to.eql(+req_data.salary)\r",
							"});\r",
							"\r",
							"//Проверить, что 1-й элемент параметра salary равен salary*2 из request (salary забрать из request)\r",
							"pm.test(\"Test salary 1 auto\", function() {\r",
							"    pm.expect(+res_body.salary[1]).to.eql(+req_data.salary*2)\r",
							"});\r",
							"\r",
							"//Проверить, что 2-й элемент параметра salary равен salary*3 из request (salary забрать из request)\r",
							"pm.test(\"Test salary 2 auto\", function() {\r",
							"    pm.expect(+res_body.salary[2]).to.eql(+req_data.salary*3)\r",
							"});\r",
							"\r",
							"//Создать и передать в окружении переменные name, age, salary\r",
							"pm.environment.set(\"name\", req_data.name);\r",
							"pm.environment.set(\"age\", req_data.age);\r",
							"pm.environment.set(\"salary\", req_data.salary);\r",
							"\r",
							"//Написать цикл который выведет в консоль по порядку элементы списка из параметра salary\r",
							"for (let i in res_body.salary) {\r",
							"    console.log(res_body.salary[i]);\r",
							"};"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5005/object_info_4?name=Lex&age=26&salary=1346",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"object_info_4"
					],
					"query": [
						{
							"key": "name",
							"value": "Lex"
						},
						{
							"key": "age",
							"value": "26"
						},
						{
							"key": "salary",
							"value": "1346"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "user_info_2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//Спарсить response body в json\r",
							"let res = pm.response.json();\r",
							"\r",
							"//Спарсить request\r",
							"let req = request.data;\r",
							"\r",
							"//Проверить, что json response имеет параметр start_qa_salary\r",
							"pm.test(\"Response have start salary\", function() {\r",
							"    pm.expect(res).to.have.property(\"start_qa_salary\")\r",
							"});\r",
							"\r",
							"//Проверить, что json response имеет параметр qa_salary_after_6_months\r",
							"pm.test(\"Response have qa_salary_after_6_months\", function() {\r",
							"    pm.expect(res).to.have.property(\"qa_salary_after_6_months\")\r",
							"});\r",
							"\r",
							"//Проверить, что json response имеет параметр qa_salary_after_12_months\r",
							"pm.test(\"Response have qa_salary_after_12_months\", function() {\r",
							"    pm.expect(res).to.have.property(\"qa_salary_after_12_months\")\r",
							"});\r",
							"\r",
							"//Проверить, что json response имеет параметр qa_salary_after_1.5_year\r",
							"pm.test(\"Response have qa_salary_after_1.5_year\", function() {\r",
							"    pm.expect(res).to.have.property(\"qa_salary_after_1.5_year\")\r",
							"});\r",
							"\r",
							"//Проверить, что json response имеет параметр qa_salary_after_3.5_years\r",
							"pm.test(\"Response have qa_salary_after_3.5_years\", function() {\r",
							"    pm.expect(res).to.have.property(\"qa_salary_after_3.5_years\")\r",
							"});\r",
							"\r",
							"//Проверить, что json response имеет параметр person\r",
							"pm.test(\"Response have person\", function() {\r",
							"    pm.expect(res).to.have.property(\"person\")\r",
							"});\r",
							"\r",
							"//Проверить, что параметр start_qa_salary равен salary из request (salary забрать из request)\r",
							"pm.test(\"Response start_salary = salary auto\", function() {\r",
							"    pm.expect(res.start_qa_salary).to.eql(+req.salary)\r",
							"});\r",
							"\r",
							"//Проверить, что параметр qa_salary_after_6_months равен salary*2 из request (salary забрать из request)\r",
							"pm.test(\"Response qa_salary_after_6_months = salary*2 auto\", function() {\r",
							"    pm.expect(res.qa_salary_after_6_months).to.eql(+req.salary*2)\r",
							"});\r",
							"\r",
							"//Проверить, что параметр qa_salary_after_12_months равен salary*2.7 из request (salary забрать из request)\r",
							"pm.test(\"Response qa_salary_after_12_months = salary*2.7\", function() {\r",
							"    pm.expect(res.qa_salary_after_12_months).to.eql(+req.salary*2.7)\r",
							"});\r",
							"\r",
							"//Проверить, что параметр qa_salary_after_1.5_year равен salary*3.3 из request (salary забрать из request)\r",
							"pm.test(\"Response salary after 1.5 year = salary*3.3\", function() {\r",
							"    pm.expect(res['qa_salary_after_1.5_year']).to.eql(+req.salary*3.3)\r",
							"});\r",
							"\r",
							"//Проверить, что параметр qa_salary_after_3.5_years равен salary*3.8 из request (salary забрать из request)\r",
							"pm.test(\"Response salary after 3.5 year = salary*3.8\", function() {\r",
							"    pm.expect(res[\"qa_salary_after_3.5_years\"]).to.eql(+req.salary*3.8)\r",
							"});\r",
							"\r",
							"//Проверить, что в параметре person, 1-й элемент из u_name равен salary из request (salary забрать из request)\r",
							"pm.test(\"u_name[1] is req.salary auto\", function() {\r",
							"    pm.expect(res.person.u_name[1]).to.eql(+req.salary)\r",
							"});\r",
							"\r",
							"//Проверить, что что параметр u_age равен age из request (age забрать из request)\r",
							"pm.test(\"u_age is req.age auto\", function() {\r",
							"    pm.expect(res.person.u_age).to.eql(+req.age)\r",
							"});\r",
							"\r",
							"//Проверить, что параметр u_salary_5_years равен salary*4.2 из request (salary забрать из request)\r",
							"pm.test(\"Salary after 5 year ic salary*4.2\", function() {\r",
							"    pm.expect(res.person.u_salary_5_years).to.eql(+req.salary*4.2)\r",
							"});\r",
							"\r",
							"//Написать цикл который выведет в консоль по порядку элементы списка из параметра person\r",
							"for (var key in res.person) {\r",
							"  console.log(key + \": \" + res.person[key]);\r",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "{{name}}",
							"type": "text"
						},
						{
							"key": "age",
							"value": "{{age}}",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "{{salary}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/user_info_2",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"user_info_2"
					]
				}
			},
			"response": []
		}
	],
	"variable": [
		{
			"key": "name",
			"value": ""
		},
		{
			"key": "age",
			"value": ""
		},
		{
			"key": "salary",
			"value": ""
		}
	]
}